



NETMOD Working Group                                             M. Wang
Internet-Draft                                                     Q. Wu
Intended status: Standards Track                                  Huawei
Expires: 24 October 2020                                      I. Bryskin
                                                              Individual
                                                                  X. Liu
                                                          Volta Networks
                                                               B. Claise
                                                                   Cisco
                                                             H. Birkholz
                                                          Fraunhofer SIT
                                                           22 April 2020


              A YANG Data model for ECA Policy Management
                   draft-wwx-netmod-event-yang-latest

Abstract

   RFC8328 defines a policy-based management framework that allows
   definition of a data model to be used to represent high-level,
   possibly network-wide policies.  Policy discussed in RFC8328 are
   classified into imperative policy and declarative policy, Event
   Condition Action (ECA) policy is an typical example of imperative
   policy.  This document defines a YANG data model for the ECA policy
   management.  The ECA policy YANG provides the ability for the network
   management function (within a network element) to control the
   configuration and monitor state change and take simple and instant
   action on the server when a trigger condition on the system state is
   met.

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Discussion of this document takes place on the NETMOD Working Group
   mailing list (netmod@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/netmod/
   (https://mailarchive.ietf.org/arch/browse/netmod/).

   Source for this draft and an issue tracker can be found at
   https://github.com/henkbirkholz/draft-wwx-netmod-event-yang
   (https://github.com/henkbirkholz/draft-wwx-netmod-event-yang).

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.



Wang, et al.             Expires 24 October 2020                [Page 1]

Internet-Draft                  ECA YANG                      April 2020


   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 24 October 2020.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Conventions used in this document . . . . . . . . . . . . . .   4
     2.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   4
     2.2.  Tree Diagrams . . . . . . . . . . . . . . . . . . . . . .   5
   3.  Relationship to YANG Push . . . . . . . . . . . . . . . . . .   5
   4.  Overview of ECA YANG Data Model . . . . . . . . . . . . . . .   6
     4.1.  ECA Policy Variable and Value . . . . . . . . . . . . . .   6
     4.2.  ECA Event . . . . . . . . . . . . . . . . . . . . . . . .   8
     4.3.  ECA Condition . . . . . . . . . . . . . . . . . . . . . .   9
     4.4.  ECA Action  . . . . . . . . . . . . . . . . . . . . . . .  11
   5.  ECA YANG Model (Tree Structure) . . . . . . . . . . . . . . .  13
   6.  ECA YANG Module . . . . . . . . . . . . . . . . . . . . . . .  17
   7.  Security Considerations . . . . . . . . . . . . . . . . . . .  36
   8.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  36
   9.  Objectives for existing and possible future extension . . . .  37
   10. References  . . . . . . . . . . . . . . . . . . . . . . . . .  37
     10.1.  Normative References . . . . . . . . . . . . . . . . . .  37
     10.2.  Informative References . . . . . . . . . . . . . . . . .  38
   Appendix A.  ECA Model Usage Example  . . . . . . . . . . . . . .  39
   Appendix B.  Usage Example of Reusing Trigger-Grouping in smarter



Wang, et al.             Expires 24 October 2020                [Page 2]

Internet-Draft                  ECA YANG                      April 2020


           filter  . . . . . . . . . . . . . . . . . . . . . . . . .  41
   Appendix C.  Changes between Revisions  . . . . . . . . . . . . .  43
   Contributors  . . . . . . . . . . . . . . . . . . . . . . . . . .  45
   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  46
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  46

1.  Introduction

   Network management consists of using one or multiple device-,
   technology-, service specific policies to influence management
   behavior within the system and make sure policies are enforced or
   executed correctly.

   [RFC8328] defines a policy-based management framework that allow
   definition of a data model to be used to represent high-level,
   possibly network-wide policies.  Policies discussed in [RFC8328] are
   classified into imperative policy and declarative policy.
   Declarative policy specifies the goals to be achieved but not how to
   achieve those goals while imperative policy specifies when Events are
   triggered and what actions must be performed on the occurrence of an
   event.  Event Condition Action (ECA) policy is a typical example of
   imperative policy.

   Event-driven management of states of managed objects across a wide
   range of devices can be used to monitor state changes of managed
   objects or resource and automatic trigger of rules in response to
   events so as to better service assurance for customers and to provide
   rapid autonomic response that can exhibit self-management properties
   including self-configuration, self-healing, self-optimization, and
   self-protection.  Following are some of the use-cases where such ECA
   Policy can be used:

   *  To filter out of objects underneath a requested a subtree, the
      subscriber may use YANG Push smart filter to request the network
      server to monitor specific network management data objects and
      send updates only when the value falls within a certain range.

   *  To filter out of objects underneath a requested a subtree, the
      subscriber may use YANG Push smart filter to request the network
      server to monitor specific network management data objects and
      send updates only when the value exceeds a certain threshold for
      the first time but not again until the threshold is cleared.

   *  To provide rapid autonomic response that can exhibit self-
      management properties, the management system delegate event
      response behaviors (e.g., auto-recover from network failure) to
      the network device so that the network can react to network change
      as quickly as the event is detected.  The event response behaviors



Wang, et al.             Expires 24 October 2020                [Page 3]

Internet-Draft                  ECA YANG                      April 2020


      delegation can be done using ECA policy,e.g., to preconfigure
      protection/ restoration capability on the network device.

   *  To perform troubleshoot failures (i.e., fault verification and
      localization) and provide root cause analysis, the management
      system monitoring specific network management data objects may
      request the network device to export state information of a set of
      managed data objects when the value of monitored data object
      exceeds a certain threshold.

   *  To set up an LSP and reserve resources within the network via
      NETCONF protocol operation, Path Computation API RPC model can be
      invoked to calculate a path meeting end-to-end network performance
      criteria.

   This document defines a ECA Policy management YANG data model.  The
   ECA Policy YANG provides the ability for the network management
   function (within a network element) to control the configurations and
   monitor state parameters and take simple and instant action on the
   server when a trigger condition on the system state is met.

   The data model in this document is designed to be compliant with the
   Network Management Datastore Architecture (NMDA) [RFC8342].

2.  Conventions used in this document

2.1.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   The following terms are defined in [RFC7950] [RFC3460] and are not
   redefined here:

   *  Server

   *  Client

   *  Policy Variable

   *  Policy Value

   *  Implicit Policy Variable

   *  Explicit Policy Variable



Wang, et al.             Expires 24 October 2020                [Page 4]

Internet-Draft                  ECA YANG                      April 2020


   This document uses the following terms:

   Event:  Something that happens which may be of interest or trigger
      the invocation of the rule.  A fault, an alarm, a change in
      network state, network security threat, hardware malfunction,
      buffer untilization crossing a threshold, network connection
      setup, an external input to the system, for example.

   Condition:  Condition can be seen as a logical test that, if
      satisfied or evaluated to be true, cause the action to be carried
      out.

   Action:  Updates or invocations on local managed object attributes.

2.2.  Tree Diagrams

   Tree diagrams used in this document follow the notation defined in
   [RFC8340].

3.  Relationship to YANG Push

   YANG-push mechanism provides a subscription service for updates from
   a datastore.  And it supports two types of subscriptions which are
   distinguished by how updates are triggered: periodic and on-change.

   The on-change push allow receivers to receive updates whenever
   changes to target managed objects occur.  This document specifies a
   mechanism that provides three trigger conditions:

   *  Existence: When a specific managed object appears,disappear or
      object change, the trigger fires, e.g. reserved ports are
      configured.

   *  Boolean: The user can set the type of boolean operator (e.g.
      unequal, equal, less, less-or-equal, greater, greater-or-equal,
      etc) and preconfigured threshold value (e.g.  Pre-configured
      threshold).  If the value of a managed object meet Boolean
      conditions, the trigger fires, e.g., when the boolean operator
      type is 'less', the trigger will be fired if the value of managed
      object is less than the pre-configured Boolean value.

   *  Threshold: The user can set the rising threshold,the falling
      threshold, the delta rising threshold, the delta falling
      threshold.  A threshold test regularly compares the value of the
      monitored object with the threshold values, e.g., an event is
      triggered if the value of the monitored object is greater than or
      equal to the rising threshold or an event is triggered if the
      difference between the current measurement value and the previous



Wang, et al.             Expires 24 October 2020                [Page 5]

Internet-Draft                  ECA YANG                      April 2020


      measurement value is smaller than or equal to the delta falling
      threshold.

   In these three trigger conditions, existence with type set to object
   change is similar to on Push change.

   In addition, the model defined in this document provides a method for
   closed loop network management automation which allows automatic
   trigger of rules in response to events so as to better service
   assurance for customers and to provide rapid autonomic response that
   can exhibit self-management properties including self-configuration,
   self-healing, self-optimization, and self-protection.  The details of
   the usage example is described in Appendix A.

4.  Overview of ECA YANG Data Model

   A ECA policy rule is read as: when event occurs in a situation where
   condition is true, then action is executed.  Therefore ECA comprises
   three key elements: event, associated conditions, and associated
   actions.  These three elements should be pushed down and configured
   on the server by the client.  If the action is rejected by the server
   duing ECA policy execution, the action should be rolled back and
   cleaned up.

4.1.  ECA Policy Variable and Value

   ECA policy variable (PV) generically represents information that
   changes (or "varies"), and that is set or evaluated by software.  ECA
   policy Value is used for modeling values and constants used in policy
   conditions and actions.  In policy, conditions and actions can
   abstract information as "policy variables" to be evaluated in logical
   expressions, or set by actions, e.g., the Policy Condition has the
   semantics "variable matches value" while Policy Action has the
   semantics "set variable to value".

   In ECA, two type of policy variables are defined, implicit variable
   and explicit variable.  Explicit variables are bound to exact data
   object instance in the model while implicit variables are defined and
   evaluated outside of a model.  Each ECA policy variable has the
   following attributes:

   *  Name with Globally unique or ECA unique scope ;

   *  Type either implicit or explicit; The implicit or explicit type
      can be further broken down into global or local.

   *  Value data stored in the policy variable structured according to




Wang, et al.             Expires 24 October 2020                [Page 6]

Internet-Draft                  ECA YANG                      April 2020


      the PV type.  This structure can be used to keep intermediate
      results/meta data during the execution of an ECA policy.

   The following operations are allowed with/on a PV:

   *  initialize (with a constant/enum/identity);

   *  set (with contents of another same type PV);

   *  read (retrieve datastore contents pointed by the specified same
      type XPath/sub-tree);

   *  write (modify configuration data in the datastore with the PV's
      content/value);

   *  insert (PV's content into a same type list);

   *  iterate (copy into PV one by one same type list elements)

   *  function calls in a form of F(arg1,arg2,...), where F is an
      identity of a function from extendable function library,
      arg1,arg2,etc are PVs respectively, the function's input
      parameters, with the result returned in result policy variable.

   PVs could be used as input/output of an ECA invoked RPC and policy
   argument in the func calls.  PVs could also be a source of
   information sent to the client in notification messages.

   PVs could be used in condition expressions

   The model structure for the Policy Variable is shown below:

       +--rw policy-variables
       |  +--rw policy-variable* [name]
       |     +--rw name                string
       |     +--rw (type-choice)?
       |     |  +--:(implicit)
       |     |  |  +--rw implicit-variable identityref
       |     |  +--:(explicit)
       |     |  |  +--rw explicit-variable yang:xpath1.0
       |     +--rw policy-value?       <anydata>










Wang, et al.             Expires 24 October 2020                [Page 7]

Internet-Draft                  ECA YANG                      April 2020


4.2.  ECA Event

   The ECA event are used to keep track of state of changes associated
   with one of multiple operational state data objects in the network
   device.  Typical examples of ECA event include a fault, an alarm, a
   change in network state, network security threat, hardware
   malfunction, buffer utilization crossing a threshold, network
   connection setup, and an external input to the system.

   Each ECA Event has the following attributes:

   *  name, the name of ECA event;

   *  type, either one time or peridic scheduling;

   *  group-id, which can be used to group a set of events that can be
      executed together,e.g., deliver a service or provide service
      assurance;

   *  scheduled-time,configuration scheduling - scheduling one time or
      periodic.

   Nested-event are supported by allowing one event's trigger to
   reference other event's definitions using the call-event
   configuration.  Called events apply their triggers and actions before
   returning to the calling event's trigger and resuming evaluation.  If
   the called event is triggered, then it returns an effective boolean
   true value to the calling event.  For the calling event, this is
   equivalent to a condition statement evaluating to a true value and
   evaluation of the event continues.

   All events specified in the ECA policy model are continuously
   monitored by the server.

   The model structure for the ECA Event is shown below:
















Wang, et al.             Expires 24 October 2020                [Page 8]

Internet-Draft                  ECA YANG                      April 2020


   <CODE BEGINS>
        +--rw event* [name type]
           +--rw name                 string
           +--rw policy-variable?
           |      -> /eca/policy-variables/policy-variable/name
           +--rw (type-choice)?
           |  +--:(stream)
           |  +--rw stream
           |  |  +--rw name?               string
           |  |  +--rw filter*             string
           |  +--:(alarm-event-stream)
           |  |  +--rw  resource             resource
           |  |  +--rw  alarm-type-id        alarm-type-id
           |  |  +--rw  alarm-type-qualifier alarm-type-qualifier
           |  |  +--rw  alt-resource         resource
           |  |  +--rw  related-alarm*
           |  |  +--rw  impacted-resource*    resource
           |  |  +--rw  root-cause-resource*  resource
           |  |  +--rw  time                 yang:date-and-time
           |  |  +--rw  percieved-severity   severity-with-clear
           |  |  +--rw  alarm-text           alarm-text
           |  +--:(timer)
           |  |  +--rw time-schedule!
           |  |  +--rw start?             yang:date-and-time
           |  |  +--rw repeat-interval?   uint32
   <CODE ENDS>

4.3.  ECA Condition

   Condition can be seen as a logical test that, if satisfied or
   evaluated to be true, cause the action to be carried out.  In this
   model, condition can be specified as logical combinations of the
   following three condition expressions:

   *  Existence: An existence condition monitors and manages the
      absence, presence, and change of a data object, for example,
      interface status.  When a monitored object is specified, the
      system reads the value of the monitored object regularly.

      -  If the existence test type is Absent, the system triggers a
         network event and takes the specified action when the monitored
         object disappears.

      -  If the existence test type is Present, the system triggers a
         network event and takes the specified action when the monitored
         object appears.





Wang, et al.             Expires 24 October 2020                [Page 9]

Internet-Draft                  ECA YANG                      April 2020


      -  If the existence test type is Changed, the system triggers a
         network event and takes the specified action when the value of
         the monitored object changes.

   *  Boolean: A Boolean test compares the value of the monitored object
      with the reference value and takes action according to the
      comparison result.  The comparision hierarchy is logical
      hierarchies specified in a form of:

   <policy-variable> <relation> <policy-value> or
   <policy-variable1> <relation> <policy-variable2>

   relation is one of the comparison operations from the set:
   ==, !=, >, <, >=, <=

   *  The operation types include unequal, equal, less, lessorequal,
      greater, and greaterorequal.  For example, if the comparison type
      is equal, an event is triggered when the value of the monitored
      object equals the reference value.  The event will not be
      triggered again until the value becomes unequal and comes back to
      equal.

   *  Threshold: A threshold trigger condition regularly compares the
      value of the monitored object with the threshold values , with one
      of the following mechanisms:

      -  A rising event is triggered if the value of the monitored
         object is greater than or equal to the rising threshold.

      -  A falling event is triggered if the value of the monitored
         object is smaller than or equal to the falling threshold.

      -  A rising event is triggered if the difference between the
         current measurement value and the previous measurement value is
         greater than or equal to the delta rising threshold.

      -  A falling network event is triggered if the difference between
         the current measurement value and the previous measurement
         value is smaller than or equal to the delta falling threshold.

      -  A falling event is triggered if the values of the monitored
         object, the rising threshold, and the falling threshold are the
         same.

      -  A falling event is triggered if the delta rising threshold, the
         delta falling threshold, and the difference between the current
         sampled value and the previous sampled value is the same.




Wang, et al.             Expires 24 October 2020               [Page 10]

Internet-Draft                  ECA YANG                      April 2020


      If the value of the monitored object crosses a threshold multiple
      times in succession, the managed device triggers an event only for
      the first crossing.

   In addition, logical operation type can be used to describe complex
   logical operations between different condition lists under the same
   event, for example, (condition A & condition B) or condition C.

   The model structure for the condition is shown below:

         +--rw conditions
         |  +--rw condition* [name]
         |     +--rw name                      string
         |     +--rw (expression-choice)?
         |        +--:(logical-operation)
         |        |  +--rw logical-operation-type?   identityref
         |        |  +--rw comparison-operation* [name]
         |        |  |  +--rw name                string
         |        |  |  +--rw comparision-type?   identityref
         |        |  |  +--rw arg1
         |        |  |  |  +--rw policy-argument
         |        |  |  |     +--rw type?                    identityref
         |        |  |  |     +--rw (argument-choice)?
         |        |  |  |        +--:(policy-constant)
         |        |  |  |        |  +--rw constant?                string
         |        |  |  |        +--:(policy-variable)
         |        |  |  |        |  +--rw policy-variable?         leafref
         |        |  |  |        +--:(xpath)
         |        |  |  |           +--rw xpath?                   string
         |        |  |  +--rw arg2
         |        |  |     +--rw policy-argument
         |        |  |        +--rw type?                    identityref
         |        |  |        +--rw (argument-choice)?
         |        |  |           +--:(policy-constant)
         |        |  |           |  +--rw constant?                string
         |        |  |           +--:(policy-variable)
         |        |  |           |  +--rw policy-variable?         leafref
         |        |  |           +--:(xpath)
         |        |  |              +--rw xpath?                   string
         |        +--:(xpath)
         |           +--rw condition-xpath?          string

4.4.  ECA Action

   The action list consists of updates or invocations on local managed
   object attributes and a set of actions are defined as follows, which
   will be performed when the corresponding event is triggered:




Wang, et al.             Expires 24 October 2020               [Page 11]

Internet-Draft                  ECA YANG                      April 2020


   *  sending one time log notification

   *  (-re)configuration - modifying a configuration data in the
      conventional configuration datastore.

   *  adding/removing event notify subscription (essentially, the same
      action as performed when a client explicitly adds/removes a
      subscription)

   *  executing an RPC defined by a YANG module supported by the server
      (the same action as performed when a client interactively calls
      the RPC);

   *  performing operations and function calls on PVs (such as assign,
      read, insert, iterate, etc);

   Multiple ECA Actions could be triggered by a single ECA event.

   Any given ECA Condition or Action may appear in more than one ECAs.

   The model structure for the actions is shown below:






























Wang, et al.             Expires 24 October 2020               [Page 12]

Internet-Draft                  ECA YANG                      April 2020


         +--rw actions
         |  +--rw action* [name]
         |     +--rw name              string
         |     +--rw action-element* [name]
         |     |  +--rw name                string
         |     |  +--rw action-type?        identityref
         |     |  +--rw (action-operation)?
         |     |     +--:(action)
         |     |     |  +--rw action-name?
         |     |     |          -> /eca/actions/action/name
         |     |     +--:(set)
         |     |     |  +--rw name?              string
         |     |     |  +--rw policy-variable* [name]
         |     |     |     +--rw name               string
         |     |     |     +--rw policy-argument
         |     |     |     +--rw policy-value  <anydata>
         |     |     +--:(function-call)
         |     |     |  +--rw function-call
         |     |     |     +--rw function-type?   identityref
         |     |     |     +--rw src
         |     |     |     |  +--rw policy-argument
         |     |     |     +--rw dst
         |     |     |        +--rw policy-argument
         |     |     +--:(rpc-operation)
         |     |     |  +--rw rpc-operation
         |     |     |     +--rw name?              string
         |     |     |     +--rw nc-action-xpath?   string
         |     |     |     +--rw policy-variable* [name]
         |     |     |        +--rw name               string
         |     |     |        +--rw policy-argument
         |     |     +--:(notify-operation)
         |     |        +--rw notify-operation
         |     |           +--rw name?              string
         |     |           +--rw policy-variable* [name]
         |     |              +--rw name               string
         |     |              +--rw policy-argument
         |     +--rw time-schedule
         |        +--rw start?             yang:date-and-time
         |        +--rw repeat-interval?   string

5.  ECA YANG Model (Tree Structure)

   The following tree diagrams [RFC8340] provide an overview of the data
   model for the "ietf-eca" module.







Wang, et al.             Expires 24 October 2020               [Page 13]

Internet-Draft                  ECA YANG                      April 2020


      module: ietf-eca
        +--rw policy-variables
        |  +--rw policy-variable* [name]
        |     +--rw name                string
        |     +--rw (type-choice)?
        |     |  +--:(implicit)
        |     |  |  +--rw implicit-variable identityref
        |     |  +--:(explicit)
        |     |  |  +--rw explicit-variable yang:xpath1.0
        |     +--rw policy-value?       union
        +--rw event* [name type]
        |  +--rw name                 string
        |  +--rw policy-variable?
        |  |      -> /eca/policy-variables/policy-variable/name
        |  +--rw (type-choice)?
        |  |  +--:(stream)
        |  |  +--rw stream
        |  |  |  +--rw name?               string
        |  |  |  +--rw filter*             string
        |  |  +--:(alarm-event-stream)
        |  |  |  +--rw  resource             resource
        |  |  |  +--rw  alarm-type-id        alarm-type-id
        |  |  |  +--rw  alarm-type-qualifier alarm-type-qualifier
        |  |  |  +--rw  alt-resource         resource
        |  |  |  +--rw  related-alarm*
        |  |  |  +--rw  impacted-resource*    resource
        |  |  |  +--rw  root-cause-resource*  resource
        |  |  |  +--rw  time                 yang:date-and-time
        |  |  |  +--rw  percieved-severity   severity-with-clear
        |  |  |  +--rw  alarm-text           alarm-text
        |  |  +--:(timer)
        |  |  |  +--rw time-schedule!
        |  |  |  +--rw start?             yang:date-and-time
        |  |  |  +--rw repeat-interval?   uint32
        +--rw conditions
        |  +--rw condition* [name]
        |     +--rw name                      string
        |     +--rw script-name               string
        |     +--rw (expression-choice)?
        |        +--:(logical-operation)
        |        |  +--rw logical-operation-type?   identityref
        |        |  +--rw comparison-operation* [name]
        |        |  |  +--rw name                string
        |        |  |  +--rw comparision-type?   identityref
        |        |  |  +--rw arg1
        |        |  |  |  +--rw policy-argument
        |        |  |  |     +--rw type?                    identityref
        |        |  |  |     +--rw (argument-choice)?



Wang, et al.             Expires 24 October 2020               [Page 14]

Internet-Draft                  ECA YANG                      April 2020


        |        |  |  |        +--:(policy-constant)
        |        |  |  |        |  +--rw constant?                string
        |        |  |  |        +--:(policy-variable)
        |        |  |  |        |  +--rw policy-variable?         leafref
        |        |  |  |        +--:(xpath)
        |        |  |  |           +--rw xpath?                   string
        |        |  |  +--rw arg2
        |        |  |     +--rw policy-argument
        |        |  |        +--rw type?                    identityref
        |        |  |        +--rw (argument-choice)?
        |        |  |           +--:(policy-constant)
        |        |  |           |  +--rw constant?                string
        |        |  |           +--:(policy-variable)
        |        |  |           |  +--rw policy-variable?         leafref
        |        |  |           +--:(xpath)
        |        |  |              +--rw xpath?                   string
        |        +--:(xpath)
        |           +--rw condition-xpath?          string
        +--rw actions
        |  +--rw action* [name]
        |     +--rw name              string
        |     +--rw action-element* [name]
        |     |  +--rw name                string
        |     |  +--rw action-type?        identityref
        |     |  +--rw (action-operation)?
        |     |     +--:(action)
        |     |     |  +--rw action-name?
        |     |     |          -> /eca/actions/action/name
        |     |     +--:(set)
        |     |     |  +--rw name?              string
        |     |     |  +--rw policy-variable* [name]
        |     |     |     +--rw name               string
        |     |     |     +--rw policy-argument
        |     |     |     +--rw policy-value  <anydata>
        |     |     +--:(function-call)
        |     |     |  +--rw function-call
        |     |     |     +--rw function-type?   identityref
        |     |     |     +--rw src
        |     |     |     |  +--rw policy-argument
        |     |     |     +--rw dst
        |     |     |        +--rw policy-argument
        |     |     +--:(rpc-operation)
        |     |     |  +--rw rpc-operation
        |     |     |     +--rw name?              string
        |     |     |     +--rw nc-action-xpath?   string
        |     |     |     +--rw policy-variable* [name]
        |     |     |        +--rw name               string
        |     |     |        +--rw policy-argument



Wang, et al.             Expires 24 October 2020               [Page 15]

Internet-Draft                  ECA YANG                      April 2020


        |     |     +--:(notify-operation)
        |     |        +--rw notify-operation
        |     |           +--rw name?              string
        |     |           +--rw policy-variable* [name]
        |     |              +--rw name               string
        |     |              +--rw policy-argument
        |     +--rw time-schedule
        |        +--rw start?             yang:date-and-time
        |        +--rw repeat-interval?   string
        +--rw ecas
        |  +--rw eca* [name]
        |     +--rw name                        string
        |     +--rw event-name                  leafref
        |     +--rw policy-variable* [name]
        |     |  +--rw name           string
        |     |  +--rw (type-choice)?
        |     |  +--:(implicit)
        |     |  |  +--rw implicit-variable identityref
        |     |  +--:(explicit)
        |     |  |  +--rw explicit-variable yang:xpath1.0
        |     |  +--rw value?         <anydata>
        |     +--rw condition-action* [name]
        |     |  +--rw name         string
        |     |  +--rw condition?   -> /gnca/conditions/condition/name
        |     |  +--rw action?      -> /gnca/actions/action/name
        |     +--rw cleanup-condition-action* [name]
        |     |  +--rw name         string
        |     |  +--rw condition?   -> /gnca/conditions/condition/name
        |     |  +--rw action?      -> /gnca/actions/action/name
        |     +---x start
        |     +---x stop
        |     +---x pause
        |     +---x resume
        |     +---x next-action
        |     +--ro execution* [id]
        |        +--ro id                               uint32
        |        +--ro oper-status?                     oper-status
        |        +--ro start-time?
        |        |       yang:date-and-time
        |        +--ro stop-time?
        |        |       yang:date-and-time
        |        +--ro next-scheduled-time?
        |        |       yang:date-and-time
        |        +--ro last-condition-action?
        |        |       -> ../../condition-action/name
        |        +--ro last-condition?
        |        |       -> ../../condition-action/condition
        |        +--ro last-action?



Wang, et al.             Expires 24 October 2020               [Page 16]

Internet-Draft                  ECA YANG                      April 2020


        |        |       -> ../../condition-action/action
        |        +--ro last-cleanup-condition-action?
        |                -> ../../cleanup-condition-action/name
        +--rw eca-scripts
        |  +--rw eca-script* [script-name]
        |     +--rw script-name    string
        |     +--rw eca* [eca-name]
        |        +--rw eca-name    -> /gnca/ecas/eca/name

6.  ECA YANG Module

   <CODE BEGINS> file "ietf-eca@2020-04-15.yang"
   module ietf-eca {
        yang-version 1.1;
        namespace "urn:ietf:params:xml:ns:yang:ietf-eca";
        prefix "gncd";
        import ietf-yang-types {
          prefix "yang";
        }

        import ietf-inet-types {
          prefix "inet";
        }
        import ietf-alarms {
          prefix "al";
        }
        import ietf-subscribed-notifications {
          prefix "sn";
        }

        organization
          "IETF Network Configuration (NETCONF) Working Group";

        contact
          "WG Web:   <http://tools.ietf.org/wg/netmod/>
           WG List:  <mailto:netmod@ietf.org>
           Editor:   Qin Wu
                     <mailto:bill.wu@huawei.com>
           Editor:   Igor Bryskin
                     <mailto:Igor.Bryskin@huawei.com>
           Editor:   Henk Birkholz
                     <mailto:henk.birkholz@sit.fraunhofer.de>
           Editor:   Xufeng Liu
                     <mailto:xufeng.liu.ietf@gmail.com>
           Editor:   Benoit Claise
                     <mailto:bclaise@cisco.com>
           Editor:   Alexander Clemm
                     <mailto:ludwig@clemm.org>";



Wang, et al.             Expires 24 October 2020               [Page 17]

Internet-Draft                  ECA YANG                      April 2020


        description
          "Event Condition Action (ECA) model.";

        revision 2018-06-22 {
          description "Initial revision";
          reference "RFC XXXX";
        }

        /*
         * Typedefs
         */
        identity argument-type {
          description
            "Possible values are:
             constant, variable, or datastore state.";
        }

        identity comparison-type {
          description
            "Possible values are:
             equal, not-equal, greater, greater-equal, less, less-equal.";
        }

        identity logical-operation-type {
          description
            "Possible values are:
             not, or, and.";
        }

        identity function-type {
          description
            "Possible values are:
             plus, minus, mult, divide, remain.";
        }

        identity content-moving-operation-type {
          description
            "Possible values are:
             copy, iterate, insert.";
        }

        identity action-type {
          description
            "Possible values are:
             action, content-move, function-call, rpc, notify.";
        }

        identity policy-variable-type {



Wang, et al.             Expires 24 October 2020               [Page 18]

Internet-Draft                  ECA YANG                      April 2020


          description
            "Possible values are:
             boolean, int32, int64, uint32, uint64, string, etc.";
        }

        /*
         * Typedefs
         */
        typedef oper-status {
          type enumeration {
            enum completed {
              description "Completed with no error.";
            }
            enum running {
              description "Currently with no error.";
            }
            enum sleeping {
              description "Sleeping because of time schedule.";
            }
            enum paused {
              description "Paused by the operator.";
            }
            enum stoped {
              description "Stopped by the operator.";
            }
            enum failed {
              description "Failed with errors.";
            }
            enum error-handling {
              description
                "Asking the operator to handle an error.";
            }
          }
          description
            "The operational status of an ECA execution.";
        }

        /*
         * Groupings
         */
        grouping policy-variable-attributes {
          description
            "Defining the policy variable attributes, including name, type
             and value. These attributes are used as part of the Policy
             Variable (PV) definition.";
          leaf name {
            type string;
            description



Wang, et al.             Expires 24 October 2020               [Page 19]

Internet-Draft                  ECA YANG                      April 2020


              "A string to uniquely identify a Policy Variable (PV), either
               globally for a global PV, or within the soope of ECA for a
               local PV.";
          }
          choice type-choice {
            description
              "The type of a policy variable may be either a common
               primative type like boolean or a type from existing
               schema node referenced by an XPath string.";
            case implicit {
              leaf implicit-variable {
                type identityref {
                  base policy-variable-type;
                }
                description
                  "A common policy variable type, defined as an
                   identity.";
              }
            }
            case explicit {
              leaf explicit-variable {
                type yang:xpath1.0;
                description
                  "A XPath string, referencing a schema node, whose
                   type is used as the type of the policy variable.";
              }
            }
          }
          anydata value {
            description
              "The value of the policy variable, in a format that is
               determined by the policy type.";
          }
        } // policy-variable-attributes

        grouping policy-argument {
          description
            "Defining a policy argument, which can be used in a comparison
             or an action.";
          container policy-argument {
            description
              "Containing the attributes of a policy argument.";
            leaf type {
              type identityref {
                base argument-type;
              }
              description
                "Identifies the argument type.";



Wang, et al.             Expires 24 October 2020               [Page 20]

Internet-Draft                  ECA YANG                      April 2020


            }
            choice argument-choice {
              description
                "Argument formation options, depending on the policy
                 type.";
              case policy-constant {
                leaf constant {
                  type string;
                  description
                    "The constant value of the policy argument.";
                }
              }
              case policy-variable {
                leaf policy-variable {
                  type leafref {
                    path "/gncd/policy-variables/"
                      + "policy-variable/name";
                  }
                  description
                    "A reference to a global policy variable, which
                     is shared by all ECA scripts.";
                }
              }
              case local-policy-variable {
                leaf local-policy-variable {
                  type leafref {
                    path "/gncd/ecas/eca/policy-variable/name";
                  }
                  description
                    "A reference to a local policy variable, which
                     is kept within an ECA instance, and appears/
                     disappears with start/stop of the ECA execution.";
                }
              }
              case xpath {
                leaf xpath {
                  type string;
                  description
                    "An XPath string, referencing the data in the
                     datastore.";
                }
              }
            }
          }
        } // policy-argument

        grouping action-element-attributes {
          description



Wang, et al.             Expires 24 October 2020               [Page 21]

Internet-Draft                  ECA YANG                      April 2020


            "Grouping of action element attributes.";
          leaf action-type {
            type identityref {
              base action-type;
            }
            description
              "Identifies the action type.";
          }
          choice action-operation {
            description
              "The operation choices that an ECA Action can take.";
            case action {
              leaf action-name {
                type leafref {
                  path "/gncd/actions/action/name";
                }
                description
                  "The operation is to execute a configured ECA Action.";
              }
            } // action
            case set-operation {
              container set-operation {
                description
                  "The operation is to set policy variable into a value.";
                leaf name {
                  type string;
                  description
                    "Name of the subscribed YANG notification.";
                }
                list policy-variable {
                  key name;
                  description
                    "A list of policy arguments carried in the notification
                     message.";
                  leaf name {
                    type string;
                    description
                      "A string name used as the list key to form a list
                       of policy arguments.";
                  }
                  uses policy-argument;
           anydata value {
             description
                      "The value of the policy variable, in a format that is
                       determined by the policy type.";
                 }
                }
              }



Wang, et al.             Expires 24 October 2020               [Page 22]

Internet-Draft                  ECA YANG                      April 2020


            } // notify-operation
            case function-call {
              container function-call {
                description
                  "The operation is to call a function, which is of one of
                   a few basic predefined types, such as plus, minus,
                   multiply, devide, or remainder.";
                leaf function-type {
                  type identityref {
                    base function-type;
                  }
                  description
                    "One of the predefined basic function types, such as
                     plus, minus, multiply, devide, or remainder.";
                        }
                container src {
                  description
                    "The source policy argument.";
                  uses policy-argument;
                }
                container dst {
                  description
                    "The distination policy argument.";
                  uses policy-argument;
                }
              }
            } // function-call
            case rpc-operation {
              container rpc-operation {
                description
                  "The operation is to call an RPC, which is defined by
                   a YANG module supported by the server.";
                leaf name {
                  type string;
                  description
                    "The name of the YANG RPC or YANG action to be
                     called.";
                }
                leaf nc-action-xpath {
                  type string;
                  description
                    "The location where the YANG action is defined.
                     This is used if and only if a YANG action is called.
                     This leaf is not set when a YANG RPC is called.";
                }
                list policy-variable {
                  key name;
                  description



Wang, et al.             Expires 24 October 2020               [Page 23]

Internet-Draft                  ECA YANG                      April 2020


                    "A list of policy arguments used as the input or output
                     parameters passed to the RPC.";
                  leaf name {
                    type string;
                    description
                      "A string name used as the list key to form a list
                       of policy arguments.";
                  }
                  uses policy-argument;
                }
              }
            } // rpc-operation
            case notify-operation {
              container notify-operation {
                description
                  "The operation is to send a YANG notification.";
                leaf name {
                  type string;
                  description
                    "Name of the subscribed YANG notification.";
                }
                list policy-variable {
                  key name;
                  description
                    "A list of policy arguments carried in the notification
                     message.";
                  leaf name {
                    type string;
                    description
                      "A string name used as the list key to form a list
                       of policy arguments.";
                  }
                  uses policy-argument;
                }
              }
            } // notify-operation
          }
        } // action-element-attributes

        grouping time-schedule-container {
          description
            "Grouping to define a container of a time schedule.";
          container time-schedule {
            presence
              "Presence indicates that the timer is enabled.";
            description
              "Specifying the time schedule to execute an ECA Action, or
               trigger an event.";



Wang, et al.             Expires 24 October 2020               [Page 24]

Internet-Draft                  ECA YANG                      April 2020


            leaf start {
              type yang:date-and-time;
              description
                "The start time of the ECA Action, or the specified event.
                 If not specified, the ECA Action is executed
                 immediately when it is called, or the event is triggered
                 immediately.";
            }
            leaf repeat-interval {
              type string {
                pattern
                  '(R\d*/)?P(\d+Y)?(\d+M)?(\d+W)?(\d+D)?T(\d+H)?'
                  + '(\d+M)?(\d+S)?';
              }
              description
                "The repeat interval to execute this ECA Action, or to
                 trigger the event.
                 The repeat interval is a string in ISO 8601 format,
                 representing a delay duration or a repeated delay
                 duration.
                 If not specified, the ECA Action or the evetn trigger
                 is executed without delay and without repetition.";
            }
          } // time-schedule
      }

        /*
         * Data nodes
         */
        container gncd {
          description
            "Top level container for Generalized Network Control Automation
             (gncd).";

          // policy-variables
          container policy-variables {
            description
              "Container of global Policy Variables (PVs).";
            list policy-variable {
              key name;
              description
                "A list of global Policy Variables (PVs), with a string
                 name as the entry key.";
              uses policy-variable-attributes;
            }
          } // policy-variables

          container events {



Wang, et al.             Expires 24 October 2020               [Page 25]

Internet-Draft                  ECA YANG                      April 2020


            description
              "Container of ECA events.";
            list event {
              key name;
              description
                "A list of events used as the triggers of ECAs.";
              leaf name {
                type string;
                description
                  "The name of the event.";
              }
              leaf policy-variable {
                type leafref {
                  path "/gncd/policy-variables/"
                    + "policy-variable/name";
                }
                description
                  "Optional association to a global policy variable, which
                   is shared by all ECA scripts.";
              }
              leaf local-policy-variable {
                type leafref {
                  path "/gncd/ecas/eca/policy-variable/name";
                }
                description
                  "Optional associateion to a local policy variable, which
                   is kept within an ECA instance, and appears/
                   disappears with start/stop of the ECA execution.";
              }
              choice type-choice {
                description
                  "The type of an event, including subscribed stream.";
                case stream {
                  container stream {
                    description
                      "The information of the subscribed stream.";
                    leaf name {
                      type string;
                      description
                        "The name of a stream subscribed and reported in
                         the model
                         ietf-subscribed-notifications.";
                    }
                    leaf-list filter {
                      type yang:xpath1.0;
                      description
                        "A list of filters to be applied to the subscribed
                         stream.";



Wang, et al.             Expires 24 October 2020               [Page 26]

Internet-Draft                  ECA YANG                      April 2020


                    }
                    container remote-publisher {
                      presence
                        "The presence indicates the publisher is remote.
                         Otherwise, the publisher is the local system.";
                      description
                        "If the subscribed stream is from a remote server,
                         this container specifies the information of the
                         remote server.";
                      leaf address {
                        type inet:ip-address-no-zone;
                        description
                          "IP address of the remote publisher.";
                      }
                      leaf port {
                        type inet:port-number;
                        description
                          "The port number on the publisher for a
                           subscription request RPC.";
                      }
                      leaf transport {
                        type sn:transport;
                        description
                          "The transport used between this system and
                           remote publisher.";
                      }
                    }
                  }
                }
               case alarm-event-stream {
                 uses al:common-alarm-parameters;
                 uses al:alarm-state-change-parameters;
                 }
                case timer {
                  uses time-schedule-container {
                    description
                      "Specifying the time schedule to trigger the event.
                       If not specified, the event is not triggered.";
                  }
                }
              }
            }
          }

          container conditions {
            description
              "Container of ECA Conditions.";
            list condition {



Wang, et al.             Expires 24 October 2020               [Page 27]

Internet-Draft                  ECA YANG                      April 2020


              key name;
              description
                "A list of ECA Conditions.";
              leaf name {
                type string;
                description
                  "A string name to uniquely identify an ECA Condition
                   globally.";
              }
              choice expression-choice {
                description
                  "The choices of expression format to specify a condition,
                   which can be either a XPath string or a YANG logical
                   operation structure.";
                case logical-operation {
                  leaf logical-operation-type {
                    type identityref {
                      base logical-operation-type;
                    }
                    description
                      "The logical operation type used to combine the
                       results from the list comparison-operation and the
                       list sub-condition, defined below.";
                  }
                  list comparison-operation {
                    key name;
                    description
                      "A list of comparison oprations, each of them defines
                       a comparison in the form of <arg1><relation><arg2>,
                       where <arg1> and <arg2> are policy arguments, while
                       <relation> is the comparison-type, which can be
                       ==, !=, >, <, >=, <=";
                    leaf name {
                      type string;
                      description
                        "A string name to uniquely identify a comparison
                         operation.";
                    }
                    leaf comparision-type {
                      type identityref {
                        base comparison-type;
                      }
                      description
                        "The comparison operation applied to the two
                         arguments arg1 and arg2 defined blow.";
                    }
                    container arg1 {
                      description



Wang, et al.             Expires 24 October 2020               [Page 28]

Internet-Draft                  ECA YANG                      April 2020


                        "The policy argument used as the first parameter of
                         the comparison opration.
                         A policy argument represents either a constant, PV
                         or data store value pointed by XPath.";
                      uses policy-argument;
                    }
                    container arg2 {
                      description
                        "The policy argument used as the secone parameter
                         of the comparison opration.
                         A policy argument represents either a constant, PV
                         or data store value pointed by XPath.";
                      uses policy-argument;
                    }
                  }
                } // logical-operation
                case xpath {
                  leaf condition-xpath {
                    type string;
                    description
                      "A XPath string, representing a logical expression,
                       which can contain comparisons of datastore values
                       and logical operations in the XPath format.";
                  }
                } // xpath
              } // expression-choice
            } // condition
          } // conditions

          container actions {
            description
              "Container of ECA Actions.";
            list action {
              key name;
              description
                "A list of ECA Actions.";
              leaf name {
                type string;
                description
                  "A string name to uniquely identify an ECA Action
                   globally.";
              }

              list action-element {
                key name;
                description
                  "A list of elements contained in an ECA Action. ";
                leaf name {



Wang, et al.             Expires 24 October 2020               [Page 29]

Internet-Draft                  ECA YANG                      April 2020


                  type string;
                  description
                    "A string name to uniquely identify the action element
                     within the scope of an ECA action.";
                }
                uses action-element-attributes;
              }

              uses time-schedule-container {
                description
                  "Specifying the time schedule to execute this ECA
                   Action.
                   If not specified, the ECA Action is executed immediately
                   when it is called.";
              }
            }
          } // actions

          container ecas {
            description
              "Container of ECAs.";
            list eca {
              key name;
              description
                "A lis of ECAs";
              leaf name {
                type string;
                description
                  "A string name to uniquely identify an ECA globally.";
              }
              leaf event-name {
                type string;
                mandatory true;
                description
                  "The name of an event that triggers the execution of
                   this ECA.";
              }

              list policy-variable {
                key name;
                description
                  "A list of ECA local Policy Variables (PVs), with a
                   string name as the entry key.";
                uses policy-variable-attributes;
                leaf is-static {
                  type boolean;
                  description
                    "'true' if the PV is static; 'false' if the PV is



Wang, et al.             Expires 24 October 2020               [Page 30]

Internet-Draft                  ECA YANG                      April 2020


                     dynamic.
                     A dynamic PV appears/disappears with the start/stop
                     of the ECA execution; a static PV exists as long as
                     the ECA is configured.";
                }
              }

              list condition-action {
                key name;
                description
                  "A list of Condition-Actions, which are configured
                   conditions each with associated actions to be executed
                   if the condition is evaluated to TRUE";
                leaf name {
                  type string;
                  description
                    "A string name uniquely identify a Condition-Action
                     within this ECA.";
                }
                leaf condition {
                  type leafref {
                    path "/gncd/conditions/condition/name";
                  }
                  description
                    "The reference to a configured condition.";
                }
                leaf action {
                  type leafref {
                    path "/gncd/actions/action/name";
                  }
                  description
                    "The reference to a configured action.";
                }
              } // condition-action

              list cleanup-condition-action {
                key name;
                description
                  "A list of Condition-Actions, which are configured
                   conditions each with associated actions to be executed
                   if the condition is evaluated to TRUE.
                   This is the exception handler of this ECA, and is
                   evaluated and executed in case any Action from the
                   normal Condition-Action list was attempted and rejected
                   by the server.";
                leaf name {
                  type string;
                  description



Wang, et al.             Expires 24 October 2020               [Page 31]

Internet-Draft                  ECA YANG                      April 2020


                    "A string name uniquely identify a Condition-Action
                     within this ECA.";
                }
                leaf condition {
                  type leafref {
                    path "/gncd/conditions/condition/name";
                  }
                  description
                    "The reference to a configured condition.";
                }
                leaf action {
                  type leafref {
                    path "/gncd/actions/action/name";
                  }
                  description
                    "The reference to a configured action.";
                }
              } // cleanup-condition-action

              action start {
                description
                  "Start to execute this ECA.";
              }
              action stop {
                description
                  "Stop the execution of this ECA.";
              }
              action pause {
                description
                  "Pause the execution of this ECA.";
              }
              action resume {
                description
                  "Resume the execution of this ECA.";
              }
              action next-action {
                description
                  "Resume the execution of this ECA to complete the next
                   action.";
              }
              list execution {
                key id;
                config false;
                description
                  "A list of executions that this ECA has completed,
                   are currently running, and will start in the scheduled
                   future.";
                leaf id {



Wang, et al.             Expires 24 October 2020               [Page 32]

Internet-Draft                  ECA YANG                      April 2020


                  type uint32;
                  description
                    "The ID to uniquely identify an execution of the ECA.";
                }
                leaf oper-status {
                  type oper-status;
                  description
                    "The running status of the execution.";
                }
                leaf start-time {
                  type yang:date-and-time;
                  description
                    "The time when the ECA started.";
                }
                leaf stop-time {
                  type yang:date-and-time;
                  description
                    "The time when the ECA completed or stopped.";
                }
                leaf next-scheduled-time {
                  type yang:date-and-time;
                  description
                    "The next time when the ECA is scheduled to resume.";
                }
                leaf last-condition-action {
                  type leafref {
                    path "../../condition-action/name";
                  }
                  description
                    "The reference to a condition-action last executed
                     or being executed.";
                }
                leaf last-condition {
                  type leafref {
                    path "../../condition-action/condition";
                  }
                  description
                    "The reference to a condition last executed or being
                     executed.";
                }
                leaf last-action {
                  type leafref {
                    path "../../condition-action/action";
                  }
                  description
                    "The reference to aa action last executed or being
                     executed.";
                }



Wang, et al.             Expires 24 October 2020               [Page 33]

Internet-Draft                  ECA YANG                      April 2020


                leaf last-cleanup-condition-action {
                  type leafref {
                    path "../../cleanup-condition-action/name";
                  }
                  description
                    "The reference to a cleanup-condition-action last
                     executed or being executed.";
                }
              }
            }
          } // ecas
          container eca-scripts {
            description
              "Container of ECA Scripts.";
            list eca-script {
              key script-name;
              description
                "A list of ECA Script.";
              leaf script-name {
                type string;
                description
                  "A string name to uniquely identify an ECA Script.";
              }
              list eca {
                key eca-name;
                description
                  "A list of ECAs contained in this ECA Script.";
                leaf eca-name {
                  type leafref {
                    path "/gncd/ecas/eca/name";
                  }
                  description
                    "The reference to a configured ECA.";
                }
              }
            }
          } // eca-scripts

          leaf running-script {
            type leafref {
              path "/gncd/eca-scripts/eca-script/script-name";
            }
            description
              "The reference to the ECA script that is currently running.";
          }
        }





Wang, et al.             Expires 24 October 2020               [Page 34]

Internet-Draft                  ECA YANG                      April 2020


        /*
         * NOTIFICATIONS
         */

        notification eca-execution {
          description
            "This notification is to send the result of an ECA execution
             that is specified to use notify-operation.";
          leaf oper-status {
            type oper-status;
            mandatory true;
            description
              "The running status of the execution.";
          }
          leaf name {
            type string;
            mandatory true;
            description
              "Name of the subscribed YANG notification.";
          }
          list policy-variable {
            key name;
            description
              "A list of policy arguments carried in the notification
               message.";
            leaf name {
              type string;
              description
                "A string name used as the list key to form a list
                 of policy arguments.";
            }
            uses policy-argument;
            anydata value {
              description
                "The value of the policy variable, in a format that is
                 determined by the policy type.";
            }
          }
        }
      }
   <CODE ENDS>










Wang, et al.             Expires 24 October 2020               [Page 35]

Internet-Draft                  ECA YANG                      April 2020


7.  Security Considerations

   The YANG modules defined in this document MAY be accessed via the
   RESTCONF protocol [RFC8040] or NETCONF protocol [RFC6241].  The
   lowest RESTCONF or NETCONF layer requires that the transport-layer
   protocol provides both data integrity and confidentiality, see
   Section 2 in [RFC8040] and [RFC6241].  The lowest NETCONF layer is
   the secure transport layer, and the mandatory-to-implement secure
   transport is Secure Shell (SSH) [RFC6242].  The lowest RESTCONF layer
   is HTTPS, and the mandatory-to-implement secure transport is TLS
   [RFC5246].

   The NETCONF access control model [RFC6536] provides the means to
   restrict access for particular NETCONF or RESTCONF users to a
   preconfigured subset of all available NETCONF or RESTCONF protocol
   operations and content.

   There are a number of data nodes defined in this YANG module that are
   writable/creatable/deletable (i.e., config true, which is the
   default).  These data nodes may be considered sensitive or vulnerable
   in some network environments.  Write operations (e.g., edit-config)
   to these data nodes without proper protection can have a negative
   effect on network operations.  These are the subtrees and data nodes
   and their sensitivity/vulnerability:

   *  /eca/event/name

   *  /eca/policy-variables/policy-variable/name

   *  /eca/event/actions/action/name

   *  /eca/event/condition/name

8.  IANA Considerations

   This document registers two URIs in the IETF XML registry [RFC3688].
   Following the format in [RFC3688], the following registrations are
   requested to be made:

   ---------------------------------------------------------------------
      URI: urn:ietf:params:xml:ns:yang:ietf-eca
      Registrant Contact: The IESG.
      XML: N/A, the requested URI is an XML namespace.
   ---------------------------------------------------------------------

   This document registers one YANG module in the YANG Module Names
   registry [RFC6020].




Wang, et al.             Expires 24 October 2020               [Page 36]

Internet-Draft                  ECA YANG                      April 2020


   ---------------------------------------------------------------------
      Name:         ietf-eca
      Namespace:    urn:ietf:params:xml:ns:yang:ietf-eca
      Prefix:       eca
      Reference:    RFC xxxx
   ---------------------------------------------------------------------

9.  Objectives for existing and possible future extension

   This section describes some of the design objectives for the ECA
   Policy management Data Model:

   *  Clear and precise identification of Event types in the ECA Policy.

   *  Clear and precise identification of managed object (i.e., policy
      variable) in the ECA Policy.

   *  Allow nested ECA policy,e.g, one event to be able to call another
      nested event.

   *  Allow the client use NETCONF/RESTCONF protocol or any other
      management protocol to configure ECA Policy.

   *  Allow the server send updates only when the value falls within a
      certain range.

   *  Allow the server send updates only when the value exceeds a
      certain threshold for the first time but not again until the
      threshold is cleared.

   *  Allow the client optimize the system behavior across the whole
      network to meet objectives and provide some performance guarantees
      for network services.

   *  Allow the the server provide rapid autonomic response in the
      network device that can exhibit self-management properties
      including self-configuration, self-healing, self-optimization, and
      self-protection.

   *  Allow the ECA execution thread in the server use YANG Push/YANG
      Push extension to communicate with the client.

10.  References

10.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,



Wang, et al.             Expires 24 October 2020               [Page 37]

Internet-Draft                  ECA YANG                      April 2020


              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC3460]  Moore, B., Ed., "Policy Core Information Model (PCIM)
              Extensions", RFC 3460, DOI 10.17487/RFC3460, January 2003,
              <https://www.rfc-editor.org/info/rfc3460>.

   [RFC3688]  Mealling, M., "The IETF XML Registry", BCP 81, RFC 3688,
              DOI 10.17487/RFC3688, January 2004,
              <https://www.rfc-editor.org/info/rfc3688>.

   [RFC6020]  Bjorklund, M., Ed., "YANG - A Data Modeling Language for
              the Network Configuration Protocol (NETCONF)", RFC 6020,
              DOI 10.17487/RFC6020, October 2010,
              <https://www.rfc-editor.org/info/rfc6020>.

   [RFC6241]  Enns, R., Ed., Bjorklund, M., Ed., Schoenwaelder, J., Ed.,
              and A. Bierman, Ed., "Network Configuration Protocol
              (NETCONF)", RFC 6241, DOI 10.17487/RFC6241, June 2011,
              <https://www.rfc-editor.org/info/rfc6241>.

   [RFC6242]  Wasserman, M., "Using the NETCONF Protocol over Secure
              Shell (SSH)", RFC 6242, DOI 10.17487/RFC6242, June 2011,
              <https://www.rfc-editor.org/info/rfc6242>.

   [RFC6536]  Bierman, A. and M. Bjorklund, "Network Configuration
              Protocol (NETCONF) Access Control Model", RFC 6536,
              DOI 10.17487/RFC6536, March 2012,
              <https://www.rfc-editor.org/info/rfc6536>.

   [RFC7950]  Bjorklund, M., Ed., "The YANG 1.1 Data Modeling Language",
              RFC 7950, DOI 10.17487/RFC7950, August 2016,
              <https://www.rfc-editor.org/info/rfc7950>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8328]  Liu, W., Xie, C., Strassner, J., Karagiannis, G., Klyus,
              M., Bi, J., Cheng, Y., and D. Zhang, "Policy-Based
              Management Framework for the Simplified Use of Policy
              Abstractions (SUPA)", RFC 8328, DOI 10.17487/RFC8328,
              March 2018, <https://www.rfc-editor.org/info/rfc8328>.

10.2.  Informative References

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246,



Wang, et al.             Expires 24 October 2020               [Page 38]

Internet-Draft                  ECA YANG                      April 2020


              DOI 10.17487/RFC5246, August 2008,
              <https://www.rfc-editor.org/info/rfc5246>.

   [RFC8040]  Bierman, A., Bjorklund, M., and K. Watsen, "RESTCONF
              Protocol", RFC 8040, DOI 10.17487/RFC8040, January 2017,
              <https://www.rfc-editor.org/info/rfc8040>.

   [RFC8340]  Bjorklund, M. and L. Berger, Ed., "YANG Tree Diagrams",
              BCP 215, RFC 8340, DOI 10.17487/RFC8340, March 2018,
              <https://www.rfc-editor.org/info/rfc8340>.

   [RFC8342]  Bjorklund, M., Schoenwaelder, J., Shafer, P., Watsen, K.,
              and R. Wilton, "Network Management Datastore Architecture
              (NMDA)", RFC 8342, DOI 10.17487/RFC8342, March 2018,
              <https://www.rfc-editor.org/info/rfc8342>.

Appendix A.  ECA Model Usage Example

     +---------------------------+
     |     Management System     |
     +---------------------------+
               |
           ECA |
         Model |
               |
               V
    +----------------------^-----+
    |      Managed Device  |     |
    |                      |     |
    |    //--\\ Condition--+     |
    |   | Event|       /    \    |
    |   |      |----->|Actions   |
    |    \\--//        \    /    |
    |                   ----     |
    +----------------------------+

   For Example:

   The management system push down one ECA policy to control interface
   behavior in the managed device that supports NETCONF protocol
   operation.

   The explicit policy variable of Event "interface-state-monitoring" is
   set to "/if:interfaces/if:interface[if:name='eth0']", the trigger
   list contains two conditions: 1)The publisher sends a push-change-
   update notification; 2) the value of "in-errors" of
   interface[name='eth0'] exceeded the pre-configured threshold.  When
   these conditions are met, corresponding action will be performed,



Wang, et al.             Expires 24 October 2020               [Page 39]

Internet-Draft                  ECA YANG                      April 2020


   i.e. disable interface[name='eth0'].  The XML examples are shown as
   below:

     <notification xmlns="urn:ietf:params:xml:ns:netconf:notification:1.0">
      <eventTime>2017-10-25T08:22:33.44Z</eventTime>
      <push-change-update
           xmlns="urn:ietf:params:xml:ns:yang:ietf-yang-push">
        <id>89</id>
        <datastore-changes>
          <yang-patch>
            <patch-id>0</patch-id>
            <edit>
              <edit-id>edit1</edit-id>
              <operation>replace</operation>
              <target>/ietf-interfaces:interfaces</target>
              <value>
                <interfaces
                     xmlns="urn:ietf:params:xml:ns:yang:ietf-interfaces">
                  <interface>
                    <name>eth0</name>
                    <oper-status>up</oper-status>
                  </interface>
                </interfaces>
              </value>
            </edit>
          </yang-patch>
        </datastore-changes>
      </push-change-update>
     </notification>

       <eca>
        <event>
        <name>interface-state-monitoring</name>
        <type>interface-exception</type>
        <scheduled-time>
        <periodic>
        <interval>10m</interval>
        </periodic>
        </scheduled-time>
        <condition>
         <name>state-push-change</name>
         <condition-description>sent a yang push
          \changed notification</condition-description>
         <test>
          <existence>
          <policy-variable>/yp:notification/yp:push-change-update/yp:id[id=89]\
         /yp:datastore-changes/.../yp:target="/ietf-interfaces:interfaces='eth0'\
        </policy-variable>



Wang, et al.             Expires 24 October 2020               [Page 40]

Internet-Draft                  ECA YANG                      April 2020


           </existence>
         </test>
        </explict-variable>
        <condition>
         <name>evaluate-in-errors</name>
         <condition-description>evaluate the number of
          the error packets</condition-description>
         <test>
          <boolean>
           <operator>greater-or-equal</operator>
           <policy-value>
            <policy-argument>
             <policy-value>100</policy-value>
            </policy-argument>
           </policy-value>
           <policy-variable>
            <policy-argument>
            <explict-variable>/if:interfaces/if:interface[if:name='eth0']\
           /if:statistic/if:in-errors</explict-variable>
            </policy-argument>
           </policy-variable>
          </boolean>
         </test>
        </condition>
        <action>
         <name>foo</name>
          <set>
           <policy-variable>/if:interfaces/if:interface[if:name='eth0']</policy-variable>
           <value>
            <interfaces>
             <interface>
              <name>eth0</name>
              <enable>false</enable>
             </interface>
            </interfaces>
           </value>
          </set>
        </action>
       </event>
      </eca>

Appendix B.  Usage Example of Reusing Trigger-Grouping in smarter filter

   The "ietf-eca.yang" module defines a set of groupings for a generic
   condition expression.  It is intended that these groupings can be
   reused by other models that require the trigger conditions, for
   example, in some subscription and notification cases, many
   applications do not require every update, only updates that are of



Wang, et al.             Expires 24 October 2020               [Page 41]

Internet-Draft                  ECA YANG                      April 2020


   certain interest.  The following example describe how to reuse the
   "ietf-eca" module to define the subscription and notification smarter
   filter.

     import ietf-subscribed-notifications {
        prefix sn;
     }
     import ietf-eca {
      prefix eca;
     }

     augment "/sn:subscriptions/sn:subscription" {
       description "add the smart filter container";
       container smart-filter {
          description "It concludes filter configurations";
          uses eca:trigger-grouping;
       }
     }

   The tree diagrams:































Wang, et al.             Expires 24 October 2020               [Page 42]

Internet-Draft                  ECA YANG                      April 2020


     module: ietf-smart-filter
     augment /sn:subscriptions/sn:subscription:
       +--rw smart-filter
         +-- (test)?
            +--:(existences)
            |  +-- existences
            |     +-- type?              enumeration
            |     +-- policy-variable?
            |             -> /policy-variables/policy-variable/name
            +--:(boolean)
            |  +-- boolean
            |     +-- operator?          operator
            |     +-- policy-value
            |     |  +-- policy-argument
            |     |     +-- (argument)?
            |     |        +--:(explict-variable)
            |     |        |  +-- explict-variable?   leafref
            |     |        +--:(implict-variable)
            |     |        |  +-- implict-variable?   leafref
            |     |        +--:(value)
            |     |           +-- policy-value?       leafref
            |     +-- policy-variable
            |        +-- policy-argument
            |           +-- (argument)?
            |              +--:(explict-variable)
            |              |  +-- explict-variable?   leafref
            |              +--:(implict-variable)
            |                 +-- implict-variable?   leafref
            +--:(threshold)
               +-- threshold
                  +-- rising-value?                    leafref
                  +-- rising-policy-variable*
                  |       -> /policy-variables/policy-variable/name
                  +-- falling-value?                   leafref
                  +-- falling-policy-variable*
                  |       -> /policy-variables/policy-variable/name
                  +-- delta-rising-value?              leafref
                  +-- delta-rising-policy-variable*
                  |       -> /policy-variables/policy-variable/name
                  +-- delta-falling-value?             leafref
                  +-- delta-falling-policy-variable*
                  |       -> /policy-variables/policy-variable/name
                  +-- startup?                         enumeration

Appendix C.  Changes between Revisions

   v05 - v06




Wang, et al.             Expires 24 October 2020               [Page 43]

Internet-Draft                  ECA YANG                      April 2020


   *  Decouple ECA model from NETCONF protocol and make it applicable to
      other network mangement protocols.

   *  Move objective section to the last section with additional generic
      objectives.

   v04 - v05

   *  Harmonize with draft-bryskin and add additional attributes in the
      models (e.g., policy variable, func call enhancement, rpc
      execution);

   *  ECA conditions part harmonization;

   *  ECA Event, Condition, Action, Policy Variable and Value
      definition;

   *  Change ietf-event.yang into ietf-eca.yang and remove ietf-event-
      trigger.yang

   v02 - v03

   *  Usage Example Update: add an usage example to introduce how to
      reuse the ietf-event-trigger module to define the subscription-
      notification smarter filter.

   v01 - v02

   *  Introduce the group-id which allow group a set of events that can
      be executed together

   *  Change threshold trigger condition into variation trigger
      condition to further clarify the difference between boolean
      trigger condition and variation trigger condition.

   *  Module structure optimization.

   *  Usage Example Update.

   v00 - v01

   *  Separate ietf-event-trigger.yang from Event management modeland
      ietf-event.yang and make it reusable in other YANG models.

   *  Clarify the difference between boolean trigger condition and
      threshold trigger condition.





Wang, et al.             Expires 24 October 2020               [Page 44]

Internet-Draft                  ECA YANG                      April 2020


   *  Change evt-smp-min and evt-smp-max into min-data-object and max-
      data-object in the data model.

Contributors

      Chongfeng Xie
      China Telecom
      Email: xiechf@ctbri.com.cn

      Xiaopeng Qin
      Huawei
      Huawei Bld., No.156 Beiqing Rd.
      Beijing  100095
      China
      qinxiaopeng@huawei.com

      Alexander Clemm
      Futurewei
      Email: ludwig@clemm.org

      Tianran Zhou
      Huawei
      Email: zhoutianran@huawei.com

      Aihua Guo
      Individual
      aihguo1@gmail.com

      Nicola Sambo
      Scuola Superiore Sant'Anna
      Via Moruzzi 1
      Pisa  56124
      Italy
      Email: nicola.sambo@sssup.it

      Giuseppe Fioccola
      Huawei Technologies
      Riesstrasse, 25
      Munich  80992
      Germany
      Email: giuseppe.fioccola@huawei.com










Wang, et al.             Expires 24 October 2020               [Page 45]

Internet-Draft                  ECA YANG                      April 2020


Acknowledgements

   This work has benefited from the discussions of ECA Policy over the
   years.  In particular, the SUPA project [
   https://datatracker.ietf.org/wg/supa/about/ ] provided approaches to
   express high-level, possibly network-wide policies to a network
   management function (within a controller, an orchestrator, or a
   network element).

   Igor Bryskin, Xufeng Liu, Alexander Clemm, Tianran Zhou contributed
   to an earlier version of [GNCA].  We would like to thank the authors
   of that document on event response behaviors delegation for material
   that assisted in thinking that helped improve this document.

Authors' Addresses

   Michael Wang
   Huawei Technologies,Co.,Ltd
   101 Software Avenue, Yuhua District
   Nanjing
   210012
   China

   Email: wangzitao@huawei.com


   Qin Wu
   Huawei
   101 Software Avenue, Yuhua District
   Nanjing
   Jiangsu, 210012
   China

   Email: bill.wu@huawei.com


   Igor Bryskin
   Individual

   Email: i_bryskin@yahoo.com


   Xufeng Liu
   Volta Networks

   Email: xufeng.liu.ietf@gmail.com





Wang, et al.             Expires 24 October 2020               [Page 46]

Internet-Draft                  ECA YANG                      April 2020


   Benoit Claise
   Cisco

   Email: bclaise@cisco.com


   Henk Birkholz
   Fraunhofer SIT

   Email: henk.birkholz@sit.fraunhofer.de









































Wang, et al.             Expires 24 October 2020               [Page 47]
